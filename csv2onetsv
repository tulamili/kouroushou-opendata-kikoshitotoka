#!/usr/bin/perl
use strict ;
use warnings ; 
use autodie 'open' ;
use feature 'say' ;
use Encode qw[ decode_utf8 ] ; 
use Getopt::Std ; getopts 'aE:it:1:34' , \my%o ;
use Term::ANSIColor qw [ :constants ] ; $Term::ANSIColor::AUTORESET = 1 ;
use Text::Glob qw [ match_glob ] ;
use Time::Piece ; # qw [ ONE_DAY ]; 
use utf8 ;

sub div ($) ; # 千進法区切り(数値の3桁ごとのコンマ)または万進法区切り(4桁ごとのアンダーバー)をする。
* div = $o{3}?sub($){$_[0]=~s/(?<=\d)(?=(\d\d\d)+($|\D))/,/gr}:$o{4}?sub($){$_[0]=~s/(?<=\d)(?=(\d{4})+($|\D))/_/gr}:sub($){$_[0]} ;

# 出力の区切り文字
my $osep = ( $o{t} // '' ) eq 0 ? ',' : "\t" ;

# 最初の行に出力する文字列 (出力の変数の並び) 
my @head = qw [ retreived_at waiting_days term_start term_end term_days applications applications_acc provisions provisions_acc amount amount_acc ] ;
say join $osep , @head if 0 ne ( $o{1} // '' ) ;

# 除外するファイル
my %exclude ; 
#$exclude { $_ } = 1 for map { match_glob ($_) } exists $o{E} ? split /,/ , $o{E} : () ; # match_globでなくてglobだと{a,b}が使えない。
#$exclude { $_ } = 1 for exists $o{E} ? split /,/ , $o{E} : () ; # match_globでなくてglobだと{a,b}が使えない。
$o{E} //= '' ;

# メイン
binmode STDOUT , "utf8" ;
binmode STDERR , "utf8" ;
my $fn ; # ファイル名
END { say "\@ARGV=@ARGV" if $? != 0 } ;

for $fn ( @ARGV ) { 
  #next if $exclude { $fn } ; 
  next if match_glob ( $o{E} , $fn ) ;
  say qq[# $fn] if $o{a} ; # ファイル名の表示
  & each_file ( $fn ) ; 
}
exit 0 ;

sub each_file ( $ ) { 
  my $b0 = Time::Piece -> strptime ( do { $_[0] =~ m/(\d{6})/ ; $1 } , '%y%m%d' ) ; # 基準となる日をファイル名から採取する。 # base 
  #my $b0 = $_[ 0 ] ;
  open my $FH , '<' , $_[0] ;
  while ( <$FH> ) { 
  	#print $_  ; next ;
    chomp ; 
    $_ = decode_utf8 ( $_ ) ;
    say FAINT YELLOW qq[<-- $_[0]:$.:$_] if $o{i} ; # 入力行を書き出す -i が指定されていた場合。デバッグ用途。
    if ( $. == 1 ) { 
      if ( $_ ne "日付,貸付申請件数,累計貸付申請件数,貸付決定件数,累計貸付決定件数,貸付決定額,累計貸付決定額" ) { 
       warn qq[The first line is out of the format : ] , "$_[0], " , BRIGHT_WHITE  qq["$_"] ; 
       return ; 
      }
      next ; # 1行目は、これ以上処理せずに、次は2行目を読みに行く。
    } ; 
  
    my @F = split /,/ , $_ , -1 ; 
    die "A line contains its columns whose number is not 7" if @F != 7 ;
    $_ *= 1_0000_0000 for $F[-2] , $F[-1] ; # 最も右の2列を1億倍にする。
    
    my $days = shift @F ; # 最左列を取り出す
    my ($day1,$day2) = split /[\~～]/ , $days , 2 ;
    my $p1 = str2tp ( $day1 , $b0 ) ; # 期間開始日
    my $p2 = str2tp ( $day2 , $b0 ) ; # 期間終了日
  
    my @out ; 
    push @out ,  $b0 -> strftime('%F') ;
    push @out ,  ( $b0 - $p2 ) / 8_6400 ;
    push @out ,  $p1 -> strftime('%F') ;
    push @out ,  $p2 -> strftime('%F') ;
    push @out ,  ( $p2 - $p1 ) / 8_6400 + 1 ;
    push @out , @F ;

    $_ = div $_ for @out [ 4 .. $#out ] ; 

    say join $osep , @out ;

    #last if eof ; 
  }
}

sub str2tp ( $$ ) { # 文字列をTime::Pieceのオブジェクトに変換する。
  my $d = $_[0] ; 
  my $o = $_[1] ; # 基準日 o ; ファイル名の引数から考えた。
  if ( $d =~ m|^(\d+)/(\d+)$|) { 
  	return Time::Piece -> strptime ( '2020-03-25' , '%Y-%m-%d' ) if $. == 2 && $d eq '3/25' ; 
  	my ($d1,$d2,$div) = map { Time::Piece -> strptime ( $_ , '%Y/%m/%d') } map { "$_/$d"} do { my $y = $o -> year ; ($y-1,$y,$y+1) } ;
  	return  ( sort { abs( $a - $o ) <=> abs ( $b - $o ) } ( $d1,$d2,$div ) ) [0] ; 
  }
  $d =~ s/R(\d+)/2018+$1/e ; # 令和のRが頭についた年は、西暦に変換する。
  return Time::Piece -> strptime ( $d , '%Y/%m/%d' ) ; 
}

## ヘルプの扱い
sub VERSION_MESSAGE {}
sub HELP_MESSAGE {
  use FindBin qw[ $Script ] ; 
  $ARGV[1] //= '' ;
  open my $FH , '<' , $0 ;
  while(<$FH>){
    s/\$0/$Script/g ;
    print $_ if s/  =head1// .. s/  =cut// and $ARGV[1] =~ /  o(p(t(i(o(ns?)?)?)?)?)?$/i ? m/  \s+\-/ : 1;
  }
  close $FH ;
  exit 0 ;
}


=encoding utf8

=head1 

  $0 ファイル名 [ファイル名] ..


  目的: 

    厚労省オープンデータの「小口資金等の特例貸付」のcsvファイル(4行)を、次のようにしてBigQueryにインポートできるようにする。
    毎週金曜日に更新されるデータをひとつに繋げるようにする。他の研究者が利用しやすいように、1個のセルに2個含まれる日付をばらばらにする。

  オプション : 

    -1 0 : 先頭行の変数名の並びを出力しない。
    -a ; ファイル名を最初に出力する。
    -E str ; 除外するファイルの指定。ワイルドカードも使用可。 -E 'LWSF220[12]*.csv' のように指定する。
    -t 0 : tsvでなくてcsvで出力する。

    -3 : 数値を3桁区切りで,(コンマ)を挿入。千進法で読みやすくする。
    -4 : 数値を4桁区切りで_(アンダーバー)を挿入。万進法で読みやすくする。
    -i : 入力したデータを各行表示する。

  利用例 : 

   以下、$0とは、この実行可能なプログラムのファイル名である。

    $0 -a -E '*220307*'  *.csv  # 
    tabs -20 ; $0 -E LWSF220307T1357.csv L*csv # タブ文字間隔を20にして、実行。
    $0 -t0 -E 'LWSF22{0307,0126,0202}T????.csv' L*csv

  開発メモ: 

    * 年末年始付近で月日表示の年をどう取り扱えば良いのか気になるので、元のcsvファイルがどういう文字列を格納していたのか気になる。
    * 厚労省の用意する「小口資金等の特例貸付」のcsvファイルは、今後用意するファイルの形式が変わることがあり得る。
       * それに備えて、JSONで列名の日本語も格納すること、及び、列番号を出力させる(c1,c2,c3..などとする)ことも考えたが、未実装。

=cut


